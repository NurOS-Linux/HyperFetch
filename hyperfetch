#!/bin/python3

import os
import platform
import psutil
import configparser
import socket
import requests
from colorama import Fore, Style, init
import importlib.util
import subprocess
from datetime import datetime
import pytz

# Инициализация colorama
init()

# Определение пути к конфигурационным файлам
if platform.system() == 'Windows':
    CONFIG_DIR = os.path.expanduser('%USERPROFILE%\\.hyperfetch')
else:
    CONFIG_DIR = os.path.expanduser('~/.hyperfetch')

CONFIG_FILE = os.path.join(CONFIG_DIR, 'config.conf')
LOGOS_DIR = os.path.join(CONFIG_DIR, 'logos')
MODULES_DIR = os.path.join(CONFIG_DIR, 'modules')

def get_current_datetime():
    """Получение текущей даты и времени в UTC"""
    utc_now = datetime.now(pytz.UTC)
    return utc_now.strftime('%Y-%m-%d %H:%M:%S')

def get_os_info():
    """Получение информации об операционной системе"""
    system = platform.system()
    if system == 'Linux':
        try:
            with open('/etc/os-release') as f:
                for line in f:
                    if line.startswith('PRETTY_NAME'):
                        return line.strip().split('=')[1].strip('"')
        except FileNotFoundError:
            pass
    return system

def get_kernel_version():
    """Получение версии ядра"""
    return platform.uname().release

def get_user_info():
    """Получение информации о пользователе и хосте"""
    try:
        return os.getlogin(), platform.node()
    except OSError:
        import pwd
        return pwd.getpwuid(os.getuid())[0], platform.node()

def get_memory_info():
    """Получение информации о памяти"""
    mem = psutil.virtual_memory()
    total = mem.total / (1024 ** 3)  # Convert bytes to GB
    available = mem.available / (1024 ** 3)
    return total, available

def get_ip_addresses():
    """Получение IP адресов"""
    hostname = socket.gethostname()
    local_ip = socket.gethostbyname(hostname)
    public_ip = None
    try:
        public_ip = requests.get('https://api.ipify.org').text
    except requests.RequestException:
        pass
    return local_ip, public_ip

def get_unix_info():
    """Получение информации о Unix-системе"""
    init_system = None
    de = os.environ.get('XDG_CURRENT_DESKTOP', None)
    terminal = os.environ.get('TERM_PROGRAM', os.environ.get('TERM', None))
    
    if os.path.exists('/run/systemd/system'):
        init_system = 'systemd'
    elif os.path.exists('/sbin/init'):
        init_system = 'SysV'
    
    return init_system, de, terminal

def get_cpu_info():
    """Получение информации о процессоре"""
    if platform.system() == 'Linux':
        try:
            # Пробуем использовать lscpu
            result = subprocess.run(['lscpu'], capture_output=True, text=True)
            if result.returncode == 0:
                lscpu_output = result.stdout
                # Ищем модель процессора
                for line in lscpu_output.split('\n'):
                    if 'Model name:' in line:
                        return line.split(':')[1].strip()
                    
            # Если lscpu не сработал, читаем из /proc/cpuinfo
            try:
                with open('/proc/cpuinfo', 'r') as file:
                    for line in file:
                        if 'model name' in line:
                            return line.split(':')[1].strip()
            except FileNotFoundError:
                pass
                
        except (subprocess.SubprocessError, FileNotFoundError):
            pass
    
    # Fallback для других ОС или если методы выше не сработали
    try:
        freq = psutil.cpu_freq()
        count = psutil.cpu_count(logical=False)
        if freq and count:
            return f"{count} cores @ {freq.current:.2f} MHz"
    except Exception:
        pass
    
    # Если ничего не сработало, используем platform.processor()
    cpu_info = platform.processor()
    if not cpu_info:
        cpu_info = "Unknown Processor"
    return cpu_info

def load_config():
    """Загрузка конфигурации"""
    config = configparser.ConfigParser()
    config.read(CONFIG_FILE)
    return config

def get_logo(config):
    """Получение ASCII-логотипа"""
    logo_file = config.get('HyperFetch', 'logo', fallback=None)
    if logo_file:
        logo_path = os.path.join(LOGOS_DIR, logo_file)
    else:
        os_name = platform.system().lower()
        logo_path = os.path.join(LOGOS_DIR, f"{os_name}.txt")
    
    if not os.path.exists(logo_path):
        logo_path = os.path.join(LOGOS_DIR, 'unknown.txt')
    
    with open(logo_path, 'r') as file:
        logo = file.read()
    
    return logo

def load_modules():
    """Загрузка модулей"""
    modules = []
    if os.path.exists(MODULES_DIR):
        for filename in os.listdir(MODULES_DIR):
            if filename.endswith('.py'):
                module_name = filename[:-3]
                module_path = os.path.join(MODULES_DIR, filename)
                spec = importlib.util.spec_from_file_location(module_name, module_path)
                module = importlib.util.module_from_spec(spec)
                try:
                    spec.loader.exec_module(module)
                    modules.append(module)
                except Exception as e:
                    print(f"Error loading module {module_name}: {e}")
    return modules

def print_hyperfetch_info():
    """Вывод информации о системе"""
    config = load_config()
    os_name = get_os_info()
    kernel_version = get_kernel_version()
    user_name, hostname = get_user_info()
    total_memory, available_memory = get_memory_info()
    local_ip, public_ip = get_ip_addresses()
    cpu_info = get_cpu_info()
    current_datetime = get_current_datetime()

    show_memory = config.getboolean('HyperFetch', 'show_memory', fallback=True)
    show_kernel = config.getboolean('HyperFetch', 'show_kernel', fallback=True)
    show_ip = config.getboolean('HyperFetch', 'show_ip', fallback=True)
    show_unix_info = config.getboolean('HyperFetch', 'show_unix_info', fallback=True)
    show_cpu = config.getboolean('HyperFetch', 'show_cpu', fallback=True)
    show_datetime = config.getboolean('HyperFetch', 'show_datetime', fallback=True)
    
    logo = get_logo(config)
    modules = load_modules()
    
    print(Fore.CYAN + logo + Style.RESET_ALL)
    if show_datetime:
        print(f"{Fore.GREEN}DateTime (UTC):{Style.RESET_ALL} {current_datetime}")
    print(f"{Fore.GREEN}OS:{Style.RESET_ALL} {os_name}")
    if show_kernel and (platform.system().lower() in ['linux', 'darwin', 'freebsd']):
        print(f"{Fore.GREEN}Kernel:{Style.RESET_ALL} {kernel_version}")
    print(f"{Fore.GREEN}User:{Style.RESET_ALL} {user_name}@{hostname}")
    if show_memory:
        print(f"{Fore.GREEN}Memory:{Style.RESET_ALL} {available_memory:.2f}GB / {total_memory:.2f}GB")
    if show_ip:
        print(f"{Fore.GREEN}Local IP:{Style.RESET_ALL} {local_ip}")
        if public_ip:
            print(f"{Fore.GREEN}Public IP:{Style.RESET_ALL} {public_ip}")
    if show_unix_info and (platform.system().lower() in ['linux', 'darwin', 'freebsd']):
        init_system, de, terminal = get_unix_info()
        if init_system:
            print(f"{Fore.GREEN}Init System:{Style.RESET_ALL} {init_system}")
        if de:
            print(f"{Fore.GREEN}DE:{Style.RESET_ALL} {de}")
        if terminal:
            print(f"{Fore.GREEN}Terminal:{Style.RESET_ALL} {terminal}")
    if show_cpu:
        print(f"{Fore.GREEN}CPU:{Style.RESET_ALL} {cpu_info}")

    # Выполнение модулей
    for module in modules:
        if hasattr(module, 'run'):
            try:
                module.run()
            except Exception as e:
                print(f"Error running module {module.__name__}: {e}")

def main():
    """Основная функция"""
    print_hyperfetch_info()

if __name__ == "__main__":
    main()